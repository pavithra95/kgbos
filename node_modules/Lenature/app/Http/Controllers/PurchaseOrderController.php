<?php

namespace App\Http\Controllers;

use App\Models\Product;
use App\Models\PurchaseOrder;
use App\Models\PurchaseOrderDetails;
use App\Models\Vendor;
use Carbon\Carbon;
use Illuminate\Http\Request;

class PurchaseOrderController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $items = PurchaseOrder::all();
        return view('purchase-orders.index')->with(compact('items'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $items = Product::all();
        
        $prefix = 'PO'; // Example prefix
        $dateComponent = now()->format('Ymd'); // Current date component
        $incrementalNumber = PurchaseOrder::count() + 1; // Incremental number

        // Concatenate and return the invoice number
        $generateInvoiceNumber = $prefix . str_pad($incrementalNumber, 4, '0', STR_PAD_LEFT);

        $invoiceNumber = $generateInvoiceNumber;
        return view('purchase-orders.create')->with(compact('items','invoiceNumber'));
    
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        // dd($request->all());
        $validatedData = $request->validate([
            'invoice_number' => 'required',
            'vendor_name' => 'required',
            'vendor_mobile' => 'required',
            'order_date' => 'required|date_format:d-m-Y',
            'grand_total' => 'required|numeric',
            'order_items.*.batch_code' => 'required',
            'order_items.*.product_id' => 'required',
            'order_items.*.quantity' => 'required|integer|min:1',
            'order_items.*.item_price' => 'required|numeric|min:0',
            'order_items.*.total' => 'required|numeric|min:0',
        ]);
    
        // Create a new Order instance
        $order = new PurchaseOrder();
        $order->purchase_invoice_no = $validatedData['invoice_number'];
        $order->purchase_invoice_date = Carbon::createFromFormat('d-m-Y', $validatedData['order_date'])->format('Y-m-d');
        $order->total_amount = $validatedData['grand_total'];
        $order->save();
    
        // Create order details for each item
        foreach ($validatedData['order_items'] as $itemData) {
            $product = Product::where('batch_code', $itemData['batch_code'])->first();
            if ($product) {
                $orderDetail = new PurchaseOrderDetails();
                $orderDetail->purchase_order_id = $order->id;
                $orderDetail->batch_code = $itemData['batch_code'];
                $orderDetail->product_id = $product->id;
                $orderDetail->product_name = $itemData['product_id'];
                $orderDetail->qty = $itemData['quantity'];
                $orderDetail->item_price = $itemData['item_price'];
                $orderDetail->total_price = $itemData['total'];
                $orderDetail->save();
            $product->available_qty = $product->available_qty + $orderDetail->qty;
            $product->save();
            } else {
                // Handle the case where the product with the given batch code is not found
                // You might want to log an error or perform some other action here
            }
        }
    
        // Create a new Customer instance
        $customer = new Vendor();
        $customer->vendor_name = $validatedData['vendor_name'];
        $customer->vendor_mobile = $validatedData['vendor_mobile'];
        $customer->purchase_return_id = $order->id;
        $customer->save();
    
        // Associate the customer with the order
        $order->vendor_id = $customer->id;
        $order->save();
        $orderData = [
            'vendor_name' => $customer->vendor_name,
            'vendor_mobile' => $customer->vendor_mobile,
            'order_date' => $order->invoice_date,
            'invoice_number' => $order->invoice_no,
            'grand_total' => $order->total_amount,
            'items' => $order->orderDetails()->get() // Assuming you have defined the relationship in your Order model
        ];
    
        // Return the invoice data as a response
        return response()->json(['success' => true, 'order' => $orderData]);
    
    }

    /**
     * Display the specified resource.
     */
    public function show(PurchaseOrder $purchaseOrder)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(PurchaseOrder $purchaseOrder)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, PurchaseOrder $purchaseOrder)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(PurchaseOrder $purchaseOrder)
    {
        //
    }

    public function getPurchaseOrderDetails(Request $request)
    {
        $invoiceNumber = $request->invoice_number;
        $item = PurchaseOrder::where('purchase_invoice_no', $invoiceNumber)->first();
        $order = PurchaseOrderDetails::where('purchase_order_id',$item->id)->with('Product')->get();
        // $order = Order::where('invoice_number', $invoiceNumber)->with('items.product')->first();
        $vendor = Vendor::where('id',$item->vendor_id)->first();
        if ($order) {
            return response()->json([
                'success' => true,
                'order' => $order,
                'vendor' => $vendor,
            ]);
        } else {
            return response()->json([
                'success' => false,
                'message' => 'Order not found.'
            ]);
        }
    }
}
