<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use App\Models\Order;
use App\Models\OrderDetails;
use App\Models\POS;
use App\Models\Product;
use App\Models\Table;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;

class OrderController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    
    public function index()
    {
        $items = Order::all();
        
        return view('order.index')->with(compact('items'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $tables = Table::all();
        $items = Product::all();
        
        $prefix = 'SO'; // Example prefix
        $dateComponent = now()->format('Ymd'); // Current date component
        $incrementalNumber = Order::count() + 1; // Incremental number

        // Concatenate and return the invoice number
        $generateInvoiceNumber = $prefix . str_pad($incrementalNumber, 4, '0', STR_PAD_LEFT);

        $invoiceNumber = $generateInvoiceNumber;
        return view('order.create')->with(compact('tables', 'items','invoiceNumber'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'invoice_number' => 'required',
            'customer_name' => 'required',
            'customer_mobile' => 'required',
            'order_date' => 'required|date_format:d-m-Y',
            'grand_total' => 'required|numeric',
            'order_items.*.batch_code' => 'required',
            'order_items.*.product_id' => 'required',
            'order_items.*.quantity' => 'required|integer|min:1',
            'order_items.*.item_price' => 'required|numeric|min:0',
            'order_items.*.total' => 'required|numeric|min:0',
        ]);
    
        // Create a new Order instance
        $order = new Order();
        $order->invoice_no = $validatedData['invoice_number'];
        $order->invoice_date = Carbon::createFromFormat('d-m-Y', $validatedData['order_date'])->format('Y-m-d');
        $order->total_amount = $validatedData['grand_total'];
        $order->save();
    
        // Create order details for each item
        foreach ($validatedData['order_items'] as $itemData) {
            $product = Product::where('batch_code', $itemData['batch_code'])->first();
            if ($product) {
                $orderDetail = new OrderDetails();
                $orderDetail->order_id = $order->id;
                $orderDetail->batch_code = $itemData['batch_code'];
                $orderDetail->product_id = $product->id;
                $orderDetail->product_name = $itemData['product_id'];
                $orderDetail->qty = $itemData['quantity'];
                $orderDetail->item_price = $itemData['item_price'];
                $orderDetail->total_price = $itemData['total'];
                $orderDetail->save();
            $product->available_qty = $product->available_qty - $orderDetail->qty;
            $product->save();
            } else {
                // Handle the case where the product with the given batch code is not found
                // You might want to log an error or perform some other action here
            }
        }
    
        // Create a new Customer instance
        $customer = new Customer();
        $customer->customer_name = $validatedData['customer_name'];
        $customer->customer_mobile = $validatedData['customer_mobile'];
        $customer->order_id = $order->id;
        $customer->save();
    
        // Associate the customer with the order
        $order->customer_id = $customer->id;
        $order->save();
        $orderData = [
            'customer_name' => $customer->customer_name,
            'customer_mobile' => $customer->customer_mobile,
            'order_date' => $order->invoice_date,
            'invoice_number' => $order->invoice_no,
            'grand_total' => $order->total_amount,
            'items' => $order->orderDetails()->get() // Assuming you have defined the relationship in your Order model
        ];
    
        // Return the invoice data as a response
        return response()->json(['success' => true, 'order' => $orderData]);
    
    }
    

    /**
     * Display the specified resource.
     */
    public function show(Order $order)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id)
    {
        $order = Order::find($id);
        $orderDetails = OrderDetails::where('order_id', $order->id)->get();
        $tables = Table::all();
        $items = Product::all();
        return view('order.edit')->with(compact('order', 'orderDetails', 'tables', 'items'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        // dd($request->all());
        $item = Order::find($id);
        $item->order_type = $request->order_type;
        if ($item->order_type == 'Dining') {
            $item->table_no = $request->table_no;
        } else {
            $item->table_no = '';
        }
        
        $item->save();

        OrderDetails::where('order_id', $item->id)->delete();
        // OrderDetails::where('order_id', $item->id)->where('status', 'pending')->delete();
        foreach ($request->product_id as $key => $prd) {
            // if ($request->status[$key] == 'pending') {
                // dd($prd);
                $product = Product::find($prd);
                $order = new OrderDetails();
                $order->order_id = $item->id;
                $order->product_id = $request->product_id[$key];
                $order->qty = $request->quantity[$key];
                $order->notes = $request->notes[$key];
                $order->status = $request->status[$key];
                $order->item_price = $product->final_price;
                $order->total_price = $order->item_price * $request->quantity[$key];
            
                $order->save();
                if($order->status == 'pending'){
                    $item->status = 'pending';
                }
                $item->save();
            // }
        }

        return redirect('/orders');
    }

    public function updateStatus($id)
    {
        $order = Order::find($id);
        $items = OrderDetails::where('order_id',$order->id)->where('status','pending')->get();
        foreach($items as $i){
            $item = OrderDetails::find($i->id);
            $item->status = 'kot';
            $item->save();
        }
        $order->status ='delivered';
        $order->save();


       return redirect('/orders');
    }
    public function updateInvoiceStatus($id)
    {
        $order = Order::find($id);
        $items = OrderDetails::where('order_id',$order->id)->where('status','kot')->get();
        foreach($items as $i){
            $item = OrderDetails::find($i->id);
            $item->status = 'delivered';
            $item->save();
        }
        $order->status ='closed';
        $order->save();


       return redirect('/orders');
    }

    public function getOrderDetails(Request $request)
{
    $invoiceNumber = $request->invoice_number;
    $item = Order::where('invoice_no', $invoiceNumber)->first();
    $order = OrderDetails::where('order_id',$item->id)->with('Product')->get();
    // $order = Order::where('invoice_number', $invoiceNumber)->with('items.product')->first();

    if ($order) {
        return response()->json([
            'success' => true,
            'order' => $order
        ]);
    } else {
        return response()->json([
            'success' => false,
            'message' => 'Order not found.'
        ]);
    }
}

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Order $order)
    {
        //
    }

    public function getSaleOrderDetails(Request $request)
    {
        $invoiceNumber = $request->invoice_number;
        $item = Order::where('invoice_no', $invoiceNumber)->first();
        $order = OrderDetails::where('order_id',$item->id)->with('Product')->get();
        // $order = Order::where('invoice_number', $invoiceNumber)->with('items.product')->first();
        $customer = Customer::where('id',$item->customer_id)->first();
        if ($order) {
            return response()->json([
                'success' => true,
                'order' => $order,
                'customer' => $customer,
            ]);
        } else {
            return response()->json([
                'success' => false,
                'message' => 'Order not found.'
            ]);
        }
    }
}
