<?php

namespace App\Http\Controllers;

use App\Models\Product;
use App\Models\Category;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $items = Product::all();
        return view('product.index')->with(compact('items'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $category = Category::all();
        return view('product.create')->with(compact('category'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $item = new Product();
        $item->batch_code = $request->batch_code;
        $item->product_name = $request->product_name;
        $item->category_id = $request->category_id;
        $item->actual_price = $request->actual_price;
        $item->tax_rate = $request->tax_rate;
        $item->unit = $request->unit;
        $item->availablity_status = $request->availablity_status;
        $item->preparation_time = $request->preparation_time;
        $item->discount = $request->discount;
        $item->available_qty = $request->available_qty;
        $item->minimum_qty = $request->minimum_qty;
        $item->final_price = $request->final_price;
        $item->description = $request->description;
        $item->save();

        return redirect('/products');
    }

    /**
     * Display the specified resource.
     */
    public function show($id)
    {
        $item = Product::find($id);
        $category = Category::all();
        return view('product.show')->with(compact('item','category'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id)
    {
        $item = Product::find($id);
        $category = Category::all();
        return view('product.edit')->with(compact('item','category'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        $item = Product::find($id);
        $item->batch_code = $request->batch_code;
        $item->product_name = $request->product_name;
        $item->category_id = $request->category_id;
        $item->actual_price = $request->actual_price;
        $item->tax_rate = $request->tax_rate;
        $item->unit = $request->unit;
        $item->availablity_status = $request->availablity_status;
        $item->preparation_time = $request->preparation_time;
        $item->discount = $request->discount;
        $item->available_qty = $request->available_qty;
        $item->minimum_qty = $request->minimum_qty;
        $item->final_price = $request->final_price;
        $item->description = $request->description;
        $item->save();

        return redirect('/products');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy($id)
    {
        $item = Product::find($id);
        $item->delete();

        return redirect()->back();
    }


    public function getProductDetailsIndex(){
        return view('qr_scan');
    }

    public function getProductDetails(Request $request)
    {
        {
            $batchCode = $request->input('batch_code');
    
            // Fetch the product details based on the batch code
            $product = Product::where('batch_code', $batchCode)->first();
    
            if ($product) {
                return response()->json([
                    'success' => true,
                    'product' => [
                        'product_name' => $product->product_name,
                        'final_price' => $product->final_price,
                        'available_qty' => $product->available_qty
                    ]
                ]);
            } else {
                return response()->json(['success' => false]);
            }
        }
}
   public function getPurchaseProductDetails(Request $request)
    {
        {
            $batchCode = $request->input('batch_code');
    
            // Fetch the product details based on the batch code
            $product = Product::where('batch_code', $batchCode)->first();
    
            if ($product) {
                return response()->json([
                    'success' => true,
                    'product' => [
                        'product_name' => $product->product_name,
                        'final_price' => $product->final_price,
                        // 'available_qty' => $product->available_qty
                    ]
                ]);
            } else {
                return response()->json(['success' => false]);
            }
        }
}
   
}
