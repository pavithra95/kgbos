@extends('layouts.app')

@section('title', 'KGGL')

@section('content_header')
@stop

@section('content')
<div id="app" class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <h4 class="m-0 text-dark col-md-6 float-left">Create Bill</h4>
                    </div>
                </div>
                <br>

                <form id="order-form" action="/orders" method="POST" role="form" class="col-md-12" autocomplete="off">
                    {{ csrf_field() }}

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group @if($errors->has('name')) text-danger @endif">
                                <label for="">Invoice Number</label>
                                <input type="text" name="invoice_number" class="form-control" value="{{$invoiceNumber}}" required="" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group @if($errors->has('date')) text-danger @endif">
                                <label for="">Invoice Date</label>
                                <input type="text" name="order_date" class="form-control date-picker" value="{{now()->format('d-m-Y')}}" required="" disabled>
                                <input type="hidden" name="order_date" class="form-control date-picker" value="{{now()->format('d-m-Y')}}" required="">
                                @if($errors->has('date'))
                                <div class="error text-danger">{{ $errors->first('date') }}</div>
                                @endif
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group @if($errors->has('name')) text-danger @endif">
                                <label for="">Customer Name</label>
                                <input type="text" name="customer_name" class="form-control" v-model="customer_name" required="">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group @if($errors->has('status')) text-danger @endif">
                                <label for="">Mobile Number</label>
                                <input type="text" name="customer_mobile" class="form-control" v-model="customer_mobile" required="">
                            </div>
                        </div>
                    </div>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Batch Code</th>
                                <th>Item Name</th>
                                <th>Qty</th>
                                <th>Price</th>
                                <th>Total</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <template v-for="item in order_items">
                                <input type="hidden" name="batch_code[]" :value="item.batch_code">
                                <input type="hidden" name="product_id[]" :value="item.product_id">
                                <input type="hidden" name="quantity[]" :value="item.quantity">
                                <input type="hidden" name="item_price[]" :value="item.item_price">
                                <input type="hidden" name="total[]" :value="item.total">
                            </template>
                            <input type="hidden" name="grand_total" :value="grandTotal">
                            
                            <tr v-for="(item, index) in order_items" :key="index">
                                <td style="width: 300px;">
                                    <input :id="'batch_code_' + index" class="form-control" type="text" v-model="item.batch_code" @change="fetchProductDetails(index)" @keypress.enter.prevent="handleEnterKey(index)">
                                </td>
                                <td style="width: 300px;">
                                    <input class="form-control" type="text" v-model="item.product_id">
                                </td>
                                <td style="width: 150px;"><input class="form-control" type="number" :min="1" v-model="item.quantity" @input="calculateTotal(index)" @keydown.enter.prevent="handleKeyPress(index, $event)"></td>
                                <td style="width: 150px;"><input class="form-control" type="number" v-model="item.item_price" @input="calculateTotal(index)" readonly></td>
                                <td style="width: 150px;"><input class="form-control" type="number" v-model="item.total" readonly></td>
                                <td style="color: red" @click="removeRow(index)">X</td>
                            </tr>
                            <tr>
                                <td colspan="4" class="text-right">Grand Total:</td>
                                <td><input class="form-control" type="number" :value="grandTotal" readonly></td>
                                <td><a :disabled="!isBatchCodeFilled" href="" @click.prevent="addItem" class="btn btn-primary">+</a></td>
                            </tr>
                        </tbody>
                    </table>
                    <button type="submit" @click.prevent="submitForm" class="btn btn-primary col-md-2 offset-md-1 btn-sm">Create</button>
                    <a class="btn btn-danger col-md-2 btn-sm" href='/product-categories'>Cancel</a>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<link href='https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/ui-lightness/jquery-ui.css' rel='stylesheet'>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
<script src="https://unpkg.com/vue-select@latest"></script>
<link rel="stylesheet" href="https://unpkg.com/vue-select@latest/dist/vue-select.css">

<script>
    $(document).ready(function() {
        $('#batch_code_0').focus();
    });

    Vue.component('v-select', VueSelect.VueSelect);
    $(document).ready(function() {
        $('.date-picker').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        new Vue({
            el: '#app',
            data: {
                customer_name: '',
                customer_mobile: '',
                order_date: '',
                
                order_items: [{
                    batch_code: '',
                    product_id: '',
                    quantity: 1,
                    notes: null,
                    item_price: 0,
                    total: 0
                }],
                items: [
                    @foreach($items as $item) {
                        id: "{{$item->id}}",
                        name: "{{$item->product_name}}",
                        final_price: "{{$item->final_price}}",
                    },
                    @endforeach
                ],
                isError: false,
                isBatchCodeFilled: false
            },
            computed: {
                grandTotal: function() {
                    return this.order_items.reduce((sum, item) => sum + (item.total || 0), 0);
                }
            },
            methods: {
                removeRow: function(index) {
                    this.order_items.splice(index, 1);
                },
                addItem: function() {
                    if (this.isBatchCodeFilled) { // Check if batch_code is filled
                        this.order_items.push({
                            batch_code: '',
                            product_id: '',
                            quantity: 1,
                            notes: null,
                            item_price: 0,
                            total: 0
                        });
                        this.isBatchCodeFilled = false;

                        // Wait for Vue to render the new row, then focus the batch code input field
                        this.$nextTick(() => {
                            const lastIndex = this.order_items.length - 1;
                            const batchCodeInput = document.getElementById(`batch_code_${lastIndex}`);
                            if (batchCodeInput) {
                                batchCodeInput.focus();
                            }
                        });
                    }
                },
                fetchProductDetails: function(index) {
                    const batchCode = this.order_items[index].batch_code;
                    this.isBatchCodeFilled = batchCode.trim() !== '';
                    axios.post('/get-product-details', {
                        _token: '{{ csrf_token() }}',
                        batch_code: batchCode
                    })
                    .then(response => {
                        if (response.data.success) {
                            const product = response.data.product;
                            const existingItemIndex = this.order_items.findIndex(item => item.batch_code === batchCode);

                            if (existingItemIndex !== -1 && existingItemIndex !== index) {
                                // If the item already exists (other than the current index), update its quantity
                                this.order_items[existingItemIndex].quantity += this.order_items[index].quantity;
                                this.calculateTotal(existingItemIndex);
                                this.order_items.splice(index, 1); // Remove the duplicated row
                            } else {
                                // If the item does not exist, update the current row
                                this.order_items[index].product_id = product.product_name;
                                this.order_items[index].item_price = product.final_price;
                                this.calculateTotal(index);
                            }
                        } else {
                            alert('Product details not found for this batch code.');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching product details:', error);
                    });
                },
                calculateTotal: function(index) {
                    const item = this.order_items[index];
                    item.total = item.quantity * item.item_price;
                },
                submitForm: function() {
                    console.log("Submit button clicked");
                    if (this.isValidForm()) {
                        console.log("Form is valid, submitting");
                        document.getElementById('order-form').submit();
                    } else {
                        console.log("Form is invalid, not submitting");
                        // alert('Please fill out all required fields.');
                    }
                },
                isValidForm: function() {
                    // Add your validation logic here
                    // For simplicity, let's just check if customer name and mobile number are filled
                    if (this.customer_name && this.customer_mobile) {
                        return true;
                    }
                    return false;
                },
                handleEnterKey: function(index) {
                    console.log('Enter key pressed for batch code at index:', index);
                    this.fetchProductDetails(index);
                },
                handleKeyPress: function(index, event) {
                    if (event.keyCode === 13) { // Check if Enter key is pressed
                        if (index === this.order_items.length - 1) { // Check if it's the last row
                            this.addItem(); // Add a new row
                        }
                    }
                }
            }
        });
    });
</script>

@stop
